import pyperclip
import requests
import pyperclip
import os
def capital_trend():

    ticker = ""

    input = pyperclip.paste().split('\n')

    a_string = ''
    b_string = ''

    for i in input:
        if "{" not in i:
            ticker = i.strip()
        else:
            list = i.split('\t')
            a_string = f"{a_string}{list[0]}\n"
            b_string = f"{b_string}{list[1]}\n"

    html_content = """
<!doctype html>
<html lang="en">
<head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LYVSDS633M"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'G-LYVSDS633M');
</script>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>@replace_with_ticker Capital Trend</title>
<link rel="icon" type="image/x-icon" href="favicon_1.png">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Saira+Condensed:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
<script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<link rel="stylesheet" href="chart-styles.css">
</head>
<body>
<section>
<img id="site-logo" src="regentquant-logo-two-colors.svg">
<h1 class="chart-title">Regentquant @replace_with_ticker Capital Trend</h1>
<h2 class="go-back-to-home-screen"><a href="https://www.regentquant.com">Go Back To Home Screen</a></h2>
<h2>How to use: Investors can predict future price trend by looking at capital trend. Candlestick chart shows underlying stock's historical adjusted OHLC price. Line chart shows daily block order amount (Unit$). Here block order stands for the largest 30% of orders in terms of turnover over the past 200 days. The data is estimated by algorithm and for reference only.</h2>
<button id="download-chart">Save Chart</button>
</section>
<!-- Fund NAV Chart -->
<div id="container"></div>
<section id="footer"></section>
<script type="text/javascript">
// Lightweight Chartsâ„¢ Example: Two Price Scales
// https://tradingview.github.io/lightweight-charts/tutorials/how_to/two-price-scales
const chartOptions = {
rightPriceScale: {
visible: true,
},
leftPriceScale: {
visible: true,
},
layout: {
textColor: 'black',
background: { type: 'solid', color: 'white' },
},
crosshair: {
mode: 0, // CrosshairMode.Normal
},
};
/** @type {import('lightweight-charts').IChartApi} */
const chart = LightweightCharts.createChart(document.getElementById('container'), chartOptions);
const baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 0 }, topLineColor: 'rgba( 38, 166, 154, 1)', topFillColor1: 'rgba( 38, 166, 154, 0.28)', topFillColor2: 'rgba( 38, 166, 154, 0.05)', bottomLineColor: 'rgba( 239, 83, 80, 1)', bottomFillColor1: 'rgba( 239, 83, 80, 0.05)', bottomFillColor2: 'rgba( 239, 83, 80, 0.28)' });
const data = [@REPLACE_A];
baselineSeries.setData(data);
const candlestickSeries = chart.addCandlestickSeries({
priceScaleId: 'left',
upColor: '#26a69a', downColor: '#ef5350', borderVisible: false,
wickUpColor: '#26a69a', wickDownColor: '#ef5350',
});
candlestickSeries.setData([@REPLACE_B]);
chart.timeScale().fitContent();
chart.applyOptions({
layout: {
fontFamily: "'Saira Condensed', sans-serif",
},
});
window.addEventListener('resize', resizeChart);
function resizeChart() {
const container = document.getElementById('container');
chart.resize(
container.offsetWidth,
container.offsetHeight
);
}
resizeChart();
document.getElementById('download-chart').addEventListener('click', function() {
const chartContainer = document.getElementById('container');
html2canvas(chartContainer, {
scale: 5  // Increase this value for higher resolution
}).then(canvas => {
const link = document.createElement('a');
link.href = canvas.toDataURL('image/png');
link.download = 'chart_high_res.png';
link.click();
});
});
</script>
</body>
</html>
""".replace("@REPLACE_A",a_string).replace("@REPLACE_B",b_string).replace("@replace_with_ticker", ticker.upper())
    file_path = f'capital-trend-{ticker}.html'

    # Writing the HTML content to the file
    with open(file_path, 'w') as file:
        file.write(html_content)

    file.close()
    print(ticker)

api_key = "ezBrk47F0tOiUtSZU7KevlNnxEEwPgIs"
data = '''Date	STOCK:NVDA	STOCK:TSLA	STOCK:AAPL	STOCK:AMZN	STOCK:META	STOCK:NFLX	STOCK:GOOGL
2023-01-03	-668161643	-980038545	-964315494	-15483292	414200861	-699398741	373610595
2023-01-04	492493781	431357097	-124819853	-348261784	669263149	1065593091	-435208901
2023-01-05	-573849601	-34424919	-554584053	-444894587	-213744234	509264470	-525541149
2023-01-06	512685344	714991499	260877138	277962742	475242508	304244583	-299126014
2023-01-09	291519546	-58175545	350157557	482730334	538405476	669001711	375944713
2023-01-10	473487990	-282819600	-156189632	390639641	545580508	1316133319	187854781
2023-01-11	-466205624	-159694570	170803469	599691218	-143992714	-980707956	371800138
2023-01-12	343317912	-184961633	-335895466	-360329319	480685170	-1190854691	-580481690
2023-01-13	404968116	230633831	50902207	298445417	567460573	893462316	2454224
2023-01-17	766056065	406774612	286457549	-834716288	-713090759	-1010322851	-584597117
2023-01-18	-429786078	-1181105768	-399598729	-89778075	-464161007	-640435551	-458465248
2023-01-19	-706762617	-508544414	-93984520	-407868149	689407488	-1162799975	534281122
2023-01-20	1142389054	377881739	-243728486	106448826	679793441	702785232	756857954
2023-01-23	919243994	640559017	233459270	-70122144	641931157	1464949605	623205238
2023-01-24	83742220	-172974450	640114426	-217268118	216410123	1193922966	-389408594
2023-01-25	-125547086	-53816986	-361680767	153993064	-743430192	-433170214	-718366766
2023-01-26	403245694	-397578864	-49490766	252399313	558665263	-1049390977	317169851
2023-01-27	672766888	1835298383	573836750	477481355	652667235	-1006056222	616008549
2023-01-30	-565068835	-1754893910	-621794958	-348128371	-864950928	-533089788	-567194271
2023-01-31	442049154	468904732	340785057	595695181	223567424	230199896	474488808
2023-02-01	608374179	98714198	-297538650	-161229947	270960057	847783393	-240565476
2023-02-02	382172416	-385642752	-710480234	58707725	317021062	752696457	365536125
2023-02-03	252520523	294303510	1026593940	-3575690	590687780	579079588	538128875
2023-02-06	639477319	121288565	-812220190	-297461819	395524751	-744788164	-413026139
2023-02-07	816984323	32977814	115511462	-158107197	499120677	-676615370	236035785
2023-02-08	-200580198	412638074	-686627589	-843542056	-827837861	207421866	-447274938
2023-02-09	270188266	-88005152	-781089930	-341399083	-818830733	346320454	-570954878
2023-02-10	-958930179	-1327258689	-967786105	-378023112	-571671250	-1195918306	-157696006
2023-02-13	760810692	-533586333	677737181	624500598	689453078	957157876	-143420133
2023-02-14	943756566	1548828221	-796874314	-326178568	-6993516	-63352665	-254263360
2023-02-15	-976344295	-17098286	409995885	661494273	-706048653	-194598743	516088607
2023-02-16	-829101528	-900866536	-134026710	-292789221	-816876600	-905025726	-194017876
2023-02-17	-852835726	-10454528	-1320410312	-344689201	-113021361	-900026641	-453013969
2023-02-21	-781619948	-1067632573	-917776786	-648142284	-592012157	-957285133	-493347875
2023-02-22	441874657	-441369982	-720662424	200255016	-654405743	-303924266	-11036754
2023-02-23	320199809	-815829692	-1079421908	-353192796	92150100	-1423202021	-511172125
2023-02-24	-585884113	-351157866	-986169326	-224284778	-639620776	-934445127	-446679741
2023-02-27	635585415	188940426	579597349	-375959331	-362972304	795849749	520104595
2023-02-28	404849295	-810633330	402187016	362518488	922617729	348152847	395123061
2023-03-01	-658830040	-597204589	-813382227	-452413296	404413702	-479197124	434004025
2023-03-02	759089870	-374905180	-273508379	-183748405	275827937	-519051962	444508756
2023-03-03	599164917	447155494	319125589	465780100	980350828	810778198	535406981
2023-03-06	-661244959	-1009329957	165391849	-28202908	576393073	391153458	632821689
2023-03-07	-77064198	-706832489	-688534445	77193796	-515849517	-371992084	-500909276
2023-03-08	749606212	-856744587	238145818	-280512282	-624194040	307004870	442085205
2023-03-09	-415202069	-1452362183	-242999270	5319202	-124179476	-992003507	40644194
2023-03-10	-617620334	-92211939	-557408603	-129275256	142022685	-715077223	-315106635
2023-03-13	-606284715	497572538	-104095792	133826176	-760567996	372039571	138354370
2023-03-14	1005376724	232407473	158550084	313043331	881006780	243362463	224626934
2023-03-15	-367523979	-285791056	-476214316	308618502	-219700457	930142421	204386091
2023-03-16	1383047177	499293133	159981940	526506160	-357265615	788232521	564911848
2023-03-17	1211424047	-238550662	-2981423144	246529985	-569358829	-618572914	-232569341
2023-03-20	350463350	251582865	407557219	-360724653	442767611	183445057	292421130
2023-03-21	-116885396	429844692	437942349	542311776	-733370258	-115756830	505027219
2023-03-22	413411068	-387534941	-44319188	-399342769	510932364	-836164327	346285863
2023-03-23	348823565	4234929	-26603244	-20981588	888018075	1214391001	400954915
2023-03-24	-930950335	113091295	-26254521	-313822530	-200868954	1183878616	-143360070
2023-03-27	-937216670	-227782671	-1106856880	-70348943	-788640224	-139623422	-484367326
2023-03-28	-1002271915	-584124106	-829226431	-466292240	-792564671	-347133339	-523972670
2023-03-29	774953493	-242912504	718651121	691899022	883277795	758769282	-446100650
2023-03-30	837200860	534517071	360890263	524219270	711157530	793819205	-581339434
2023-03-31	1198399590	1766820769	628672208	529179830	913200643	789661154	582203514
2023-04-03	-412150292	-1402181673	980921303	-61673471	-599401650	628656910	-344556747
2023-04-04	-834562831	-687514667	-734747619	555765413	581788474	-526978512	386249141
2023-04-05	-793247601	-1291100553	-912287105	-524817537	-968432148	-778258044	-370509783
2023-04-06	673010240	-32691303	354657451	216199811	400294930	-813841598	715646875
2023-04-10	1479442813	154223208	-512307259	-516641402	-811585740	-407943215	-520588377
2023-04-11	-1006436677	-6777007	-710418974	-339145941	220328434	537450104	-545685673
2023-04-12	-1230199544	-1098125862	302718582	-796770365	668454779	-520154141	-180322181
2023-04-13	930736539	673673790	977385707	533629447	1041477791	986863248	532143998
2023-04-14	352271796	-279955337	-565564319	-477707852	-241587784	-936848582	349320507
2023-04-17	-109332740	-537597614	-801257926	-339218428	-964355777	-951220032	-530691208
2023-04-18	451366776	-821956354	432476993	-542593856	-788786950	111852221	-502290962
2023-04-19	1001645323	-78475274	744316076	446764786	-653774822	-1138766420	6523401
2023-04-20	-340343551	-1253717821	376214784	374500787	-518682354	1044034093	555118558
2023-04-21	-883085825	100584399	-1118573724	198397294	-246348589	-42000257	-89168846
2023-04-24	-160441370	-192443846	-37769622	-300184594	-295399388	589381756	428540061
2023-04-25	-1081386901	69189033	17557155	-582507739	-1061422386	-724648820	-553910591
2023-04-26	1059292854	-1113580400	-718339742	-641995753	1015891922	159770239	-116823546
2023-04-27	-788087127	554066425	811681519	81584184	1169920425	438396605	603383697
2023-04-28	1303848364	292864787	319206252	-455021939	-440474417	568268113	-577715296
2023-05-01	1064850004	-695555296	324232580	-612905392	-39974902	-859997126	-68077424
2023-05-02	-1105511266	-657416615	-1050224484	549894137	-1059165734	-666923376	-743244606
2023-05-03	-798215946	-261248489	474553716	339140546	17043682	793556053	426548707
2023-05-04	-1022242505	-337668660	-265452223	505723755	-435686252	459465204	-373690677
2023-05-05	957399217	921192483	800490028	452001792	-558586761	575359357	392499808
2023-05-08	707550431	-309588737	-193868712	-16976855	44435481	833846690	634069627
2023-05-09	-1049646794	-499258746	-910971969	712589333	365188297	902165486	243687533
2023-05-10	455853140	-474938852	376525676	272491201	136314324	370908108	623957457
2023-05-11	-1125470708	319650893	-97033179	418210255	869544583	850474158	299983030
2023-05-12	-1308072239	-891972181	-953899668	-710129624	-956591025	-726321655	406817547
2023-05-15	960510228	-674914128	-543166201	133210515	1116440366	-564141244	-336197069
2023-05-16	1177443925	370171842	608717935	431751345	-716587814	-652444664	558031495
2023-05-17	1259540995	855894785	-412145820	385042885	1166684360	588256266	160257645
2023-05-18	931985039	232789216	988219972	805782376	721429883	1659300972	625417907
2023-05-19	-1123759126	363306640	54753138	-634639124	-1241918313	-1228483003	-289366227
2023-05-22	504781543	451891731	-566209823	-711388545	1387494412	76999932	512149837
2023-05-23	-1114166633	-581351408	-740495953	730354035	331245623	-1136905197	-818435941
2023-05-24	-764788391	-547544250	-342370004	403892351	453754550	1071227128	-723953771
2023-05-25	-127777439	-467494007	286352683	-635343648	1187107141	-495817826	397705974
2023-05-26	365524557	703706612	935697706	856917092	1164845458	1431528255	647914851
2023-05-30	497597808	-486499898	111752423	-149528903	967988210	1228898320	87998953
2023-05-31	-1341841936	449643019	206615061	-675421632	90737011	397102533	549295261
2023-06-01	885464410	34827410	752887452	684381185	1058457926	1299330703	738627948
2023-06-02	-1913075371	178801601	374055827	529287764	740749653	-424907336	526839545
2023-06-05	870427298	-412770446	-481235499	542263146	948147192	1383530219	630278480
2023-06-06	-1320081007	303662658	-557862091	840225688	1057703141	-1031678919	500161962
2023-06-07	-918263504	-774004101	-294170902	-492950429	-1039362503	1467598672	-103863570
2023-06-08	869279302	1330716416	493729184	461670494	627324015	1139252790	74731739
2023-06-09	851615146	-1027717132	576516100	-102552531	476265314	1504052378	412578432
2023-06-12	-873459209	290569388	906471963	608720527	1167501776	-76922378	392444358
2023-06-13	561062013	440604540	151154273	-301220262	291923457	1439433172	-543832869
2023-06-14	1641498680	-1369036150	312703876	-464311125	658227298	1393540301	-533261142
2023-06-15	236571609	-483098854	655102312	-91190721	1251677845	1223548057	225492368
2023-06-16	1882406525	1068019814	2179432765	610349009	2168527331	-1595905118	319257843
2023-06-20	1549393030	824324343	582208804	495420476	388830247	884205574	-547170775
2023-06-21	-1620312760	-2492346886	-631966192	-281142234	-1313468055	-1049776382	-538468167
2023-06-22	1102983063	693246072	1136060153	789860140	650792483	-1002140482	684200230
2023-06-23	-1083913008	-1357459247	627270038	195654010	257914547	-720968990	-510191788
2023-06-26	-1449624321	-1570775380	-715697416	-725211885	-1328141970	-490823002	-398475638
2023-06-27	788254965	686509496	755663429	385259180	1264462454	605733908	352524687
2023-06-28	449073441	326393055	872998135	25777002	-594663767	1222944086	407413319
2023-06-29	-1422564379	-405721948	687163392	-614727264	-1088925266	-1029570750	-475623695
2023-06-30	972277075	377032123	149201667	714238977	1364193980	1344057159	675815843
2023-07-03	244382296	-390381394	-808791596	-63557447	-208872499	-729744095	48354403
2023-07-05	1282427241	736322510	-803564801	880293143	1399546569	-767031314	743400081
2023-07-06	-1490258451	-762802837	264175223	-843239643	-1128157625	-1061710869	-732078858
2023-07-07	1182629993	-672628869	416761875	742926593	579554620	473528671	340581297
2023-07-10	-949182311	-824035833	-781889373	-407445650	904598862	763363916	-526828621
2023-07-11	-64334109	-245178323	-1255216058	646613630	1350195697	-1006989431	460500109
2023-07-12	1600660226	-230897523	925984172	662632237	1074521182	892021112	552870300
2023-07-13	2271976734	426050658	49741027	310448539	1114257293	814691622	618962237
2023-07-14	-610267387	867605672	-526338609	955672561	-1107857682	-784193818	655252320
2023-07-17	271130600	227899116	814345310	-362857386	591060191	1244416131	-499521689
2023-07-18	1148473876	264600411	-911562464	-477845049	8765005	2348694003	-520136059
2023-07-19	-902535603	-1072439052	214544475	920234622	1609609198	620846738	-222924927
2023-07-20	-1732736473	-2689445701	-867526366	-614647857	-1140640424	-2041782222	-339700074
2023-07-21	-650362432	-372393412	-1111264774	-122562573	-1519008116	-2060794931	474542883
2023-07-24	1527644331	307069175	1596431744	-924228557	-1465220264	-1545949941	506522374
2023-07-25	1883894590	-1073672692	779414342	679832461	1384711033	230329942	-306640086
2023-07-26	-1417916955	-435381266	668106227	375034772	-933786212	-1257634523	-704848848
2023-07-27	487015172	-1868772783	-426992748	140527274	-1519592293	-562900464	199914621
2023-07-28	1432381369	617863459	364736417	659663512	1888513514	1168521634	599625274
2023-07-31	-1157568649	135570823	568691125	676296914	-1532061330	1076792863	4909803
2023-08-01	-1250590106	-994158565	-1222762226	-1173068650	867882860	705713769	-470125581
2023-08-02	-1738979556	-634644830	-1153211887	-813129554	-1160020411	-1135065422	-711012113
2023-08-03	1824214040	412481415	343019208	249439156	711671572	1115611038	494336779
2023-08-04	406596500	-739861795	-1818549310	-609112233	492930859	687646650	112602821
2023-08-07	1337649536	-454016373	-932666972	328334646	1308588899	853804890	640922561
2023-08-08	-1330173360	-62420857	-25867820	-649416624	-1240171431	-767559209	-432504256
2023-08-09	-1775929626	-445618431	-455757189	-754202564	-1412951481	-816788630	-612428854
2023-08-10	-1216394523	-105316638	50756924	-618348212	-328726144	1265539368	495062292
2023-08-11	-1937810367	-791147131	-525468892	-210927694	-1323141986	-858719181	-351920026
2023-08-14	2076393953	160407210	777951283	630128167	-96548253	833578833	129032007
2023-08-15	803607789	-942094454	-644274926	-854971107	-1071351304	-474342568	-612295830
2023-08-16	-170179628	-683375402	120483628	-734092749	-1243611946	-864563105	-466007822
2023-08-17	-1294146481	-696444760	-1336287072	-236736696	-1176946132	-1147381466	501014082
2023-08-18	-794382472	-383809349	52196301	80878491	-1840377854	201262044	-783493111
2023-08-21	1126560283	789400821	-219693548	75099461	1240531577	83625439	150665381
2023-08-22	-2382015913	-571454327	411491491	-269953709	-755617351	800378964	662943346
2023-08-23	1677000916	450016896	679711141	419683939	1481658739	1378549521	750375607
2023-08-24	-2408052336	-749380535	-1066109428	-706165296	-1241946836	-1092309169	-542804357
2023-08-25	-1073828676	459306555	484997942	145347793	-1216415002	960008296	-511311714
2023-08-28	-174465228	-490645834	709012690	-697573356	1216959452	129951273	494955807
2023-08-29	1919681728	1844762409	1013820640	718817683	1336036659	766889095	660760192
2023-08-30	538880134	466074652	532741137	335984205	-1381678485	730017524	590475187
2023-08-31	366110517	411014332	375490247	1041053567	1336194082	97704634	504757718
2023-09-01	-2139953493	-1794791125	430735076	-443826134	592826925	1057232886	-569016312
2023-09-05	938686517	823773167	863639838	-688552483	1330796707	1219568596	-178102139
2023-09-06	-2216748217	-737984527	-1032278263	-448536008	-1115453136	-777368941	-538017711
2023-09-07	-1421283540	-376917380	-696263567	761687075	170767808	-710954491	215917737
2023-09-08	-1713043248	-464439980	374866601	530333258	653835562	-297539370	586941282
2023-09-11	-2316218718	1316502749	-543139333	538679752	1442319131	444964082	323474545
2023-09-12	-213798731	-809778587	-906750734	-281474372	-1228608845	-688700442	-529559391
2023-09-13	1597591849	-15864198	-549426007	559167141	1304538945	-1329454373	446792499
2023-09-14	-1509992322	604074186	981861621	815966596	1540777418	-1399645383	803699080
2023-09-15	-887001847	214890755	-3122726147	144354030	-1014132391	-363580662	-1213646311
2023-09-18	269924269	-727718318	883696039	-528791828	1054549077	-604086724	669940075
2023-09-19	-916242858	-215139103	233872686	-624106115	304573634	143465971	-670095764
2023-09-20	-933986161	-176024055	-950642820	-522845667	-124323694	-614960410	-744597132
2023-09-21	-1461104937	-816363052	-514255527	-702154991	-1376374198	231330377	-680511768
2023-09-22	1298046878	-1486489576	303892870	19915992	1375731343	-532929832	62341463
2023-09-25	1299798753	-509955915	436494794	467892031	-512333371	696326728	231871884
2023-09-26	1059802259	32415183	-1021060510	-322797256	-1348086209	-699596208	-599532811
2023-09-27	-273584249	-907408945	-656816856	-219715394	321844790	-105386760	615501036
2023-09-28	1332989932	588483977	286274230	55080250	1248516771	-643888030	411916903
2023-09-29	389052228	-496055975	104932688	299519771	179773621	555907702	-187950012
2023-10-02	1593540009	267802050	439400492	651371864	1158684598	590259833	593473923
2023-10-03	-1875162582	-722766769	-768783890	-809099656	-1163344878	-300217176	-344811331
2023-10-04	1525739696	1173296014	459238646	495378138	1433862456	-81758081	567539160
2023-10-05	1715601738	-268098700	38059176	-840658360	-1320479201	-902454632	-552886731
2023-10-06	1867081521	564321867	629729115	506105018	1249149205	580688855	563296864
2023-10-09	-226186246	-201706147	824606051	437828889	1503866832	-596095973	545111021
2023-10-10	919971825	646879245	-207027149	562496398	1358799777	-697967826	450780772
2023-10-11	1323555109	-619334326	7420745	426319116	1662970799	-676167073	532745556
2023-10-12	-159569925	-79145614	183657265	171676425	-162829227	-671316059	-675753953
2023-10-13	-1563834496	-931566839	-1041511246	-612756214	-1422877809	-987701522	-527484677
2023-10-16	1892382963	346075236	-778910033	564834734	1308261008	766401986	604665565
2023-10-17	-861661366	326018977	-1196163731	-488774844	907744978	-917995134	20765624
2023-10-18	-1339313645	-1274258194	-662626493	-462845303	-1278341885	-1008948047	181091148
2023-10-19	936008524	-1957456391	15684828	228611490	133139597	1631087083	221806135
2023-10-20	-829009289	-297084527	-1640667644	-865828006	-941489643	132273857	-750325221
2023-10-23	1809230418	32164381	323727556	501008647	1288482580	778262367	342018664
2023-10-24	-909667271	-86222665	-519966827	-175181622	-97895894	1161686611	764692001
2023-10-25	-1300346737	-388117032	-978067164	-432997045	-1424577328	-17744954	-971534027
2023-10-26	-913159085	-498275378	-476723550	316471210	-226796926	-656128139	249647271
2023-10-27	-999686409	-65197885	549822058	370376203	1137590191	-798174639	-355408742
2023-10-30	152592324	-1282179368	819821350	532547500	1069487797	1041137858	575855280
2023-10-31	-661792299	573477099	162375874	789496490	-1398076287	-333847804	-470211314
2023-11-01	1074904023	22622332	439698893	462799313	1360144926	975601640	534816687
2023-11-02	1384481758	191274234	958173467	211294134	-1176707855	652374635	618366193
2023-11-03	1678628451	-228273660	467872975	796762667	1498361212	771312065	697610528
2023-11-06	1090619700	-525591144	889313989	958315965	1143968599	-153758617	744256795
2023-11-07	1306394664	590716707	903213968	661533998	1333120093	301627874	603025482
2023-11-08	1480426034	-362538587	528680375	-767149217	-110662542	225710804	880949903
2023-11-09	360371199	-974561011	1442133	-480761014	950634168	232349629	-282471991
2023-11-10	2024627880	145150523	524190477	923176850	1594258192	984469940	659355880
2023-11-13	1257192019	1018184533	-1099821510	-171205960	1147003241	-575399212	357681890
2023-11-14	827674821	452808115	886565891	396171786	1330328379	863838093	539424942
2023-11-15	-1786863242	-112828123	865818438	-572946364	-1095130666	1152438115	647084968
2023-11-16	1130762358	-1331440598	765748740	-412661648	-813016412	716719328	617256058
2023-11-17	-802313313	-8894437	-1202063596	1147299849	-267049849	-691198343	-977184019
2023-11-20	2356989558	559124193	1213600735	667161843	1452184349	873176234	810358283
2023-11-21	-1474445485	522807954	-802225424	-805239507	-1119525443	384707040	469496164
2023-11-22	-1327569840	-585289048	1034092802	997627711	1221554742	735972087	693374676
2023-11-24	-508784032	-113266221	-1142375872	246267593	-447412244	350601933	-349639003'''

# Split the data by lines and then by tabs
lines = data.split('\n')
headers = lines[0].split('\t')
columns = {header: [] for header in headers}

# Populate the dictionary with data
for line in lines[1:]:
    values = line.split('\t')
    for header, value in zip(headers, values):
        columns[header].append(value)

keys = [i for i in columns.keys()]

for i in keys:

    if i != "Date":

        # Start Date & End Date
        start_date = columns['Date'][0]
        end_date = columns['Date'][-1]

        # Grabbing OHLC Data from Polygon
        ticker = i.split(':')[1]
        data = requests.get(
            f"https://api.polygon.io/v2/aggs/ticker/{ticker}/range/1/day/{start_date}/{end_date}?adjusted=true&sort=asc&limit=50000&apiKey={api_key}")
        data = data.json()['results']

        fs = ''
        ohlc_html_list = []
        final_ohlc_html_list = []
        final_nci_html_list = []
        for a in data:

            html = "{time:'@replace_with_date',open:,high:,low:,close:},"
            html = html.replace('open:',f'open:{a["o"]}').replace('high:',f'high:{a["h"]}')
            html = html.replace('low:',f'low:{a["l"]}').replace('close:',f'close:{a["c"]}')
            ohlc_html_list.append(html)
        for date, ohlc_html in zip(columns['Date'], ohlc_html_list):

            ohlc_html = ohlc_html.replace("@replace_with_date", date)
            final_ohlc_html_list.append(ohlc_html)

        for date, nci in zip(columns['Date'], columns[i]):

            nci_html = "{time:'@replace_with_date',value:@replace_with_nci},".replace("@replace_with_date", date).replace("@replace_with_nci", nci)
            final_nci_html_list.append(nci_html)

        final_ohlc_html_str = ""
        final_nci_html_str = ""

        for ohlc, nci in zip(final_ohlc_html_list, final_nci_html_list):

            final_ohlc_html_str = f"{final_ohlc_html_str}{ohlc}\n"
            final_nci_html_str = f"{final_nci_html_str}{nci}\n"

        html_template = """
<!doctype html>
<html lang="en">
   <head>
           <!-- Google tag (gtag.js) -->
      <script async src="https://www.googletagmanager.com/gtag/js?id=G-LYVSDS633M"></script>
      <script>
         window.dataLayer = window.dataLayer || [];
         function gtag(){dataLayer.push(arguments);}
         gtag('js', new Date());
         gtag('config', 'G-LYVSDS633M');
      </script>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>@replace_ticker Capital Trend</title>
      <link rel="icon" type="image/x-icon" href="../../favicon_1.png">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Saira+Condensed:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
      <script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
      <link rel="stylesheet" href="../../chart-styles.css">
   </head>
   <body>
      <section>
         <img id="site-logo" src="../../regentquant-logo-two-colors.svg">
         <h1 class="chart-title">Regentquant @replace_ticker Capital Trend</h1>
         <h2 class="go-back-to-home-screen"><a href="https://www.regentquant.com">Go Back To Home Screen</a></h2>
         <h2>How to use: Investors can predict future price trend by looking at capital trend. Candlestick chart shows underlying stock's historical adjusted OHLC price. Line chart shows daily block order amount (Unit$). Here block order stands for the largest 30% of orders in terms of turnover over the past 200 days. The data is estimated by algorithm and for reference only.</h2>
        <button id="download-chart">Save Chart</button>
      </section>
      <!-- Fund NAV Chart -->
      <div id="container"></div>
      <section id="footer"></section>
      <script type="text/javascript">
        // Lightweight Chartsâ„¢ Example: Two Price Scales
// https://tradingview.github.io/lightweight-charts/tutorials/how_to/two-price-scales

const chartOptions = {
	rightPriceScale: {
		visible: true,
	},
	leftPriceScale: {
		visible: true,
	},
	layout: {
		textColor: 'black',
		background: { type: 'solid', color: 'white' },
	},
	crosshair: {
		mode: 0, // CrosshairMode.Normal
	},
};
/** @type {import('lightweight-charts').IChartApi} */
const chart = LightweightCharts.createChart(document.getElementById('container'), chartOptions);
const baselineSeries = chart.addBaselineSeries({ baseValue: { type: 'price', price: 0 }, topLineColor: 'rgba( 38, 166, 154, 1)', topFillColor1: 'rgba(38, 166, 154, 0.28)', topFillColor2: 'rgba( 38, 166, 154, 0.05)', bottomLineColor: 'rgba( 207, 87, 119, 1)', bottomFillColor1: 'rgba(207, 87, 119, 0.05)', bottomFillColor2: 'rgba( 207, 87, 119, 0.28)' });
const data = [
@replace_nci
];
baselineSeries.setData(data);


const candlestickSeries = chart.addCandlestickSeries({
	priceScaleId: 'left',
	upColor: '#26a69a', downColor: '#e04d76', borderVisible: false,
	wickUpColor: '#26a69a', wickDownColor: '#e04d76',
});

candlestickSeries.setData([
@replace_ohlc
]);

chart.timeScale().fitContent();

         chart.applyOptions({
                         layout: {
                             fontFamily: "'Saira Condensed', sans-serif",
                         },
                     });

         window.addEventListener('resize', resizeChart);

         function resizeChart() {
         const container = document.getElementById('container');
         chart.resize(
         container.offsetWidth,
         container.offsetHeight
         );
         }
         resizeChart();
         document.getElementById('download-chart').addEventListener('click', function() {
         const chartContainer = document.getElementById('container');

         html2canvas(chartContainer, {
         scale: 5  // Increase this value for higher resolution
         }).then(canvas => {
         const link = document.createElement('a');
         link.href = canvas.toDataURL('image/png');
         link.download = 'chart_high_res.png';
         link.click();
         });
         });

      </script>
   </body>
</html>
"""

        formatted_html = html_template.replace("@replace_ticker", ticker).replace("@replace_nci", final_nci_html_str).replace("@replace_ohlc", final_ohlc_html_str)


        # Check if html exists
        asset_type = i.split(':')[0]
        file_name = f"capital-trend-{ticker.lower()}.html"

        if asset_type == "ETF":
            # Check if the file exists
            if not os.path.exists(f"ETF/{file_name}"):
                # Create the file if it doesn't exist
                with open(f"ETF/{file_name}", 'w') as file:
                    file.write('')  # Creating an empty file
                file.close()

            with open(f"ETF/{file_name}", "w") as file:
                file.write(formatted_html)
            file.close()

        elif asset_type == "STOCK":
            # Check if the file exists
            if not os.path.exists(f"STOCK/{file_name}"):
                # Create the file if it doesn't exist
                with open(f"STOCK/{file_name}", 'w') as file:
                    file.write('')  # Creating an empty file
                file.close()
            with open(f"STOCK/{file_name}", "w") as file:
                file.write(formatted_html)
            file.close()
        print(file_name)
